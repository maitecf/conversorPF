import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
import 'dart:convert';

const request = "https://api.hgbrasil.com/finance?format=json&key=2245985d";

void main() {
  SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle(statusBarColor: Colors.transparent,
));
runApp(MaterialApp(
  home: Home(),
  theme: ThemeData(
    hintColor: Colors.amber,
    primaryColor: Colors.white,
    // ignore: prefer_const_constructors
    inputDecorationTheme: InputDecorationTheme(
      enabledBorder:
        OutlineInputBorder(borderSide: BorderSide(color: Colors.white)),
      focusedBorder: 
        OutlineInputBorder(borderSide: BorderSide(color: Colors.amber)),
      hintStyle: TextStyle(color: Colors.amber),
    )),
  debugShowCheckedModeBanner: false,  
  ));
}

Future<Map> getData() async {
  http.Response response = await http.get(request);
  return jsonDecode(response.body);
}

class Home extends StatefulWidget {
  @override
  _HomeState createState() => _HomeState();
}

class _HomeState extends State<home> {
  final realController = TextEditingController();
  final dolarController = TextEditingController();
  final euroController= TextEditingController();

  double dolar;
  double euro;

  void _realChanged(String text) {
    if (text.isEmpty)
      _resetFields(false, real: false, dolar: true, euro: true);
    else {
      double real = double.parse(text);
      dolarController.text = (real / dolar).toStringAsFixed(2);
      euroController.text = (real / euro).toStringAsFixed(2);
    }  
  }

  void _dolarChanged(String text) {
    if (text.isEmpty)
      _resetFields(false, real: true, dolar: false, euro: true);
    else {
      double dolar = double.parse(text);
      realController.text = (dolar * this.dolar).toStringAsFixed(2);
      euroController.text = (dolar * this.dolar / euro).toStringAsFixed(2);
    }  
  }

  void _euroChanged(String text) {
    if (text.isEmpty)
      _resetFields(false, real: true, dolar: true, euro: false);
    else {
      double euro = double.parse(text);
      realController.text = (euro * this.euro).toStringAsFixed(2);
      euroController.text = (euro * this.euro / dolar).toStringAsFixed(2);
    }  
  }

  void _resetFields(bool desfoca,
      {@required bool real, @required bool dolar, @required bool euro}) {
    if (real == true) realController.text = "";
    if (dolar == true) dolarController.text = "";
    if (euro == true) euroController.text = "";
    if (desfoca == true) {
      WidgetsBinding.instance.focusManager.primaryFocus?.unfocus();
    }    
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: Text("\$ Conversor  \$",
          style: TextStyle(color: Colors.black87)),
        backgroundColor: Colors.amber,
        centerTitle: true,
        actions: [
          IconButton(
            icon: Icon(
              Icons.refresh,
              color: Colors.black87,
            ),
            onPressed: () {
              _resetFields(true, real: true, dolar: true, euro: true);
            },
          )  
        ],
      ),
      body: FutureBuilder<Map>(
      builder: (context, snapshot) {
        switch (snapshot.connectionState) {
          case ConnectionState.none:
          case ConnectionState.waiting:
            return Center(
              child: Text(
                "Carregando Dados...",
              style: TextStyle(color: Colors.amber, fontSize: 25.0),
              textAlign: TextAlign.center,
           ));
        default:
          if (snapshot.hasError) {
            return Center(
              child: Text(
                "Houve um erro :(",
              style: TextStyle(color: Colors.amber, fontSize: 25.0),
              textAlign: TextAlign.center,

            ));
          }else {
            dolar = 
            snapshot.data["results"]["currencies"]["USD"]["buy"];
            euro = snapshot.data["results"]["currencies"]["EUR"]["buy"];

            return SingleChildScrollView(
              padding: EdgeInsets.all(10.0),
              child: Column(
                children: [
                  Icon(Icons.monetization_on,
                    size: 150.0, color: Colors.amber),
                  SizedBox(
                    height: 40,
                  ),
                  buildTextField(
                    "Reais", "R\$ ", realController, _realChanged),
                  Divider(),
                  buildTextField(
                    "Dolar", "U\$ ", dolarController, _dolarChanged),
                  Divider(),
                  buildTextField(
                    "Euros", "â‚¬", euroController, _euroChanged),    
                ],
              ),
            );
          }   
        }
      }));
  }
}

Widget buildTextField(
  String label, String prefix, TextEditingController c, Function f){
return TextField(
  controller: c,
  decoration: InputDecoration (
    labelText: label,
    labelStyle: TextStyle(color: Colors.amber),
    border: OutlineInputBorder(),
    prefixText: prefix),
  style: TextStyle(color: Colors.amber, fontSize: 25.0),
  onChanged: f,
  keyboardType: TextInputType.number,  
  );

  }
